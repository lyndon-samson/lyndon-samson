---
layout: post
title:  "C based server with dynamically loaded logic"
date:   2023-12-01 06:41:38 -0600
categories: programming c 
---

This post is about an experiment with a c tcp network server and dynamically loaded custom logic with no change to the server base code. 

Here is the server code

server.c
{% highlight c linenos %}
#include "stdio.h"
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <string.h>
#include <dlfcn.h>
// --------------
int init(struct sockaddr_in *soca, int socl, short int port) {
  int soc = socket(AF_INET, SOCK_STREAM, 0);

  soca->sin_family = AF_INET;
  soca->sin_addr.s_addr=htonl(INADDR_ANY);
  soca->sin_port=htons(port);

  int bnd = bind(soc, (struct sockaddr *)soca, socl);
  int lis = listen(soc , 5);

  return soc;
}
// --------------
void sendstr(int soc, char *msg) { send(soc, msg, strlen(msg),0); }
  // --------------
int readinput(int acc, char *b, int bsz) {
  int n;
  n = recv(acc, b, bsz, 0);

  return n;

}
// --------------
int run(int argc, char *argv[]) {
  struct sockaddr_in soca;
  struct sockaddr    soca_c;
  socklen_t          socl_c = sizeof(soca_c) ;
  short              port   = 8888;
  int                run    = 1;
  int                soc    = init(&soca, (socklen_t)sizeof(soca), port);

  int (*server_start_impl)(int argc, char *argv[]);
  int (*server_end_impl)();
  int (*server_loop)(void (*sendstr)(char *msg), int(readinput)(char *b, int bsz));

  printf("Impl %s\n",argv[1]);

  void *handle      = dlopen(argv[1],RTLD_LAZY);
  server_start_impl = dlsym(handle,"server_start");
  server_end_impl   = dlsym(handle,"server_end");
  server_loop       = dlsym(handle,"server_loop");

  server_start_impl(argc, &argv[1]);

  while ( run ) {
    printf("The server is waiting for an inbound connection on port %d\n", port);
    int acc = accept(soc, &soca_c, &socl_c);
    printf("Opened an inbound connection from %s\\n",inet_ntoa(((struct sockaddr_in *)&soca_c)->sin_addr));

    void sendstr2(char *msg) { sendstr(acc, msg); }
    int readinput2(char *b, int bsz) { return readinput(acc, b, bsz); }

    run = (*server_loop)(&sendstr2, &readinput2);
    close(acc);

  }
  server_end_impl();

  close(soc);
  dlclose(handle);
}

int main(int argc, char *argv[]) {
  run(argc, argv);
}
{% endhighlight %}

Not much too it, under 100 lines of simple code. Note this code is very basic and probably subject to many vulnerabilities and exploits so its for example purposes only.

Now lets look at 2 examples of dynamically loaded logic for the tcp server.

This logic implements a guess the number game, it takes one parameter (the number to guess).

impl1.c
{% highlight c linenos  %}
#include "stdio.h"
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <string.h>
// --------------
static int num ;

int server_start(int argc, char *argv[]) {
  num    = atoi(argv[1]);
  printf("Users have to guess this %d\n",num);
}

int server_end() { printf("The user guessed the number, exiting server\n");}

char *server_prompt(void (*sendstr)(char *msg)) {
  static char buff[100];
  strcpy(buff,"Guess the number:");

  sendstr(buff);

  return buff;
}

int server_logic(char *buff, char *resp) {
  int run = 1, guess = atoi(buff);

  if ( guess == num ) {
     strcpy(resp, "Correct\n");
     run = 0;
  } else if ( guess < num )
     strcpy(resp, "Try again, it is higher\n");
  else
     strcpy(resp, "Try again, it is lower\n");

  return run;
}

int server_loop(void (*sendstr)(char *msg), int(readinput)(char *b, int bsz) ) {
  server_prompt(sendstr);

  char buff[100], resp[100];
  int n,run = 1;

  n = readinput(buff, 100);
  printf("Client Sent:%s\n",buff);
  run = server_logic(buff, resp);
  sendstr(resp);

  return run;
}
{% endhighlight %}

And here is a different implementation, this code takes 3 parameters, a number, and operator and another number. The user needs to provide the correct value for the maths operation.

impl2.c
{% highlight c linenos %}
#include "stdio.h"
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <string.h>
// --------------
static int op1 ;
static int op2 ;
static char operator ;

int server_start(int argc, char *argv[]) {
  op1 = atoi(argv[1]);
  op2 = atoi(argv[3]);
  operator = argv[2][0];
  printf("Users have to answer the math question correctly (%d %c %d)\n",op1,operator,op2);
}

int server_end() { printf("The user gave a correct answer\n");}

char *server_prompt(void (*sendstr)(char *msg)) {
  static char buff[100];
  sprintf(buff,"%d %c %d = ",op1,operator,op2);

  sendstr(buff);

  return buff;
}

int server_logic(char *buff, char *resp) {
  int run = 1, guess = atoi(buff);
  int answer;

  if ( operator == '*' ) answer = op1 * op2;
  if ( operator == '/' ) answer = op1 / op2;
  if ( operator == '+' ) answer = op1 + op2;
  if ( operator == '-' ) answer = op1 - op2;

  if ( guess == answer ) {
     strcpy(resp, "Correct\n");
     run = 0;
  } else
     strcpy(resp, "Try again\n");

  return run;
}


int server_loop(void (*sendstr)(char *msg), int(readinput)(char *b, int bsz) ) {
  server_prompt(sendstr);

  char buff[100], resp[100];
  int n,run = 1;

  n = readinput(buff, 100);
  printf("Client Sent:%s\n",buff);
  run = server_logic(buff, resp);
  sendstr(resp);

  return run;
}
{% endhighlight %}

Lets look at how to compile and run the code now.

We need an environment to run the c compiler, we will use an Unbuntu container in which we will install the compiler suite.


Run the container

{% highlight bash %}
docker run -it -v "$PWD:/s" ubuntu
{% endhighlight %}

Install the c compiler.

{% highlight bash %}
apt update
apt install build-essential
apt-get install manpages-dev
apt-get install telnet
{% endhighlight %}

Since the compiler installation can take a long time we will snapshot the container to speed up subsequent runs.

Replace the container id with your running container after installing and execute this command in another tab/window.
{% highlight bash %}
docker commit 1f41e3e589ad ubuntugcc
{% endhighlight %}

Now you can exit the container and start again with the new image and the port mapping setup

{% highlight bash %}
docker run -it -p 8888:8888 -v "$PWD:/s" ubuntugcc
{% endhighlight %}


Then, to compile the server

{% highlight bash %}
cd /s
gcc server.c -ldl
{% endhighlight %}

To compile the logic into dynamic libraries
{% highlight bash %}
gcc impl1.c -c -fPIC
gcc impl2.c -c -fPIC
gcc impl1.o -shared -o libimpl1.so
gcc impl2.o -shared -o libimpl2.so
{% endhighlight %}

the -fPIC option makes the compiled code relocatable which is required for dynamic libraries.



Look at the files in the directory, they should look something like this

{% highlight bash %}
root@lyndonslaptop:/s# ls -ltr
total 80
-rw-r--r-- 1 1000 1000  2028 Nov  9 05:44 server.c
-rwxr-xr-x 1 root root 16800 Nov  9 05:47 a.out
-rw-r--r-- 1 1000 1000  1139 Nov  9 07:01 impl1.c
-rw-r--r-- 1 1000 1000  1379 Nov  9 07:02 impl2.c
-rw-r--r-- 1 root root  3144 Nov  9 07:03 impl1.o
-rw-r--r-- 1 root root  3792 Nov  9 07:03 impl2.o
-rwxr-xr-x 1 root root 15960 Nov  9 07:04 libimpl1.so
-rwxr-xr-x 1 root root 16048 Nov  9 07:04 libimpl2.so
root@lyndonslaptop:/s#
{% endhighlight %}
This shows the server executable (a.out - yes its nostalgic) and the dynamic libraries ( *.so)

Great, now we can run the server, and telnet to it as a client.

{% highlight bash %}
root@lyndonslaptop:/s# ./a.out ./libimpl1.so 99
Impl ./libimpl1.so
Users have to guess this 99
The server is waiting for an inbound connection on port 8888
{% endhighlight %}

In another tab/window connect to the running container server process
{% highlight bash %}
samsonl@lyndonslaptop:~/src/c/pgm1$ telnet localhost 8888
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
Guess the number:55
Try again, it is higher
Connection closed by foreign host.

{% endhighlight %}

Lets try the impl2 logic

{% highlight bash %}
root@787466506cfb:/s# ./a.out ./libimpl2.so 10 + 22
Impl ./libimpl2.so
Users have to answer the math question correctly (10 + 22)
The server is waiting for an inbound connection on port 8888
{% endhighlight %}

Then in another tab run the telnet

{% highlight bash %}
samsonl@lyndonslaptop:~/src/c/pgm1$ telnet localhost 8888
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
10 + 22 = 33
Try again
Connection closed by foreign host.
samsonl@lyndonslaptop:~/src/c/pgm1$ telnet localhost 8888
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
10 + 22 = 32
Correct
Connection closed by foreign host.
samsonl@lyndonslaptop:~/src/c/pgm1$
{% endhighlight %}

I thought it was cool anyway :-) The logic code in the implementations doesn't know anything about the network activity, that's all managed by the server code.

Source code in the repo here -> [https://github.com/lyndon-samson/c-server](https://github.com/lyndon-samson/c-server)


